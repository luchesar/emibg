{
  "_args": [
    [
      {
        "raw": "pump@^0.3.5",
        "scope": null,
        "escapedName": "pump",
        "name": "pump",
        "rawSpec": "^0.3.5",
        "spec": ">=0.3.5 <0.4.0",
        "type": "range"
      },
      "/home/lucho/prj/emibg/node_modules/tar-fs"
    ]
  ],
  "_from": "pump@>=0.3.5 <0.4.0",
  "_id": "pump@0.3.5",
  "_inCache": true,
  "_location": "/pump",
  "_npmUser": {
    "name": "mafintosh",
    "email": "mathiasbuus@gmail.com"
  },
  "_npmVersion": "1.4.9",
  "_phantomChildren": {},
  "_requested": {
    "raw": "pump@^0.3.5",
    "scope": null,
    "escapedName": "pump",
    "name": "pump",
    "rawSpec": "^0.3.5",
    "spec": ">=0.3.5 <0.4.0",
    "type": "range"
  },
  "_requiredBy": [
    "/tar-fs"
  ],
  "_resolved": "https://registry.npmjs.org/pump/-/pump-0.3.5.tgz",
  "_shasum": "ae5ff8c1f93ed87adc6530a97565b126f585454b",
  "_shrinkwrap": null,
  "_spec": "pump@^0.3.5",
  "_where": "/home/lucho/prj/emibg/node_modules/tar-fs",
  "author": {
    "name": "Mathias Buus Madsen",
    "email": "mathiasbuus@gmail.com"
  },
  "bugs": {
    "url": "https://github.com/mafintosh/pump/issues"
  },
  "dependencies": {
    "end-of-stream": "~1.0.0",
    "once": "~1.2.0"
  },
  "description": "pipe streams together and close all of them if one of them closes",
  "devDependencies": {},
  "directories": {},
  "dist": {
    "shasum": "ae5ff8c1f93ed87adc6530a97565b126f585454b",
    "tarball": "https://registry.npmjs.org/pump/-/pump-0.3.5.tgz"
  },
  "homepage": "https://github.com/mafintosh/pump#readme",
  "keywords": [
    "streams",
    "pipe",
    "destroy",
    "callback"
  ],
  "license": "MIT",
  "maintainers": [
    {
      "name": "mafintosh",
      "email": "mathiasbuus@gmail.com"
    }
  ],
  "name": "pump",
  "optionalDependencies": {},
  "readme": "# pump\n\npump is a small node module that pipes streams together and destroys all of them if one of them closes.\n\n\tnpm install pump\n\n[![build status](http://img.shields.io/travis/mafintosh/pump.svg?style=flat)](http://travis-ci.org/mafintosh/pump)\n\n## What problem does it solve?\n\nWhen using standard `source.pipe(dest)` source will _not_ be destroyed if dest emits close or an error.\nYou are also not able to provide a callback to tell when then pipe has finished.\n\npump does these two things for you\n\n## Usage\n\nSimply pass the streams you want to pipe together to pump and add an optional callback\n\n``` js\nvar pump = require('pump');\nvar fs = require('fs');\n\nvar source = fs.createReadStream('/dev/random');\nvar dest = fs.createWriteStream('/dev/null');\n\npump(source, dest, function(err) {\n\tconsole.log('pipe finished', err);\n});\n\nsetTimeout(function() {\n\tdest.destroy(); // when dest is closed pump will destroy source\n}, 1000);\n```\n\nYou can use pump to pipe more than two streams together as well\n\n``` js\nvar transform = someTransformStream();\n\npump(source, transform, anotherTransform, dest, function(err) {\n\tconsole.log('pipe finished', err);\n});\n```\n\nIf `source`, `transform`, `anotherTransform` or `dest` closes all of them will be destroyed.\n\n## License\n\nMIT\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/mafintosh/pump.git"
  },
  "scripts": {
    "test": "node test.js"
  },
  "version": "0.3.5"
}
