{
  "_args": [
    [
      {
        "raw": "uglifyify@2.5.0",
        "scope": null,
        "escapedName": "uglifyify",
        "name": "uglifyify",
        "rawSpec": "2.5.0",
        "spec": "2.5.0",
        "type": "version"
      },
      "/home/lucho/prj/emibg"
    ]
  ],
  "_from": "uglifyify@2.5.0",
  "_id": "uglifyify@2.5.0",
  "_inCache": true,
  "_location": "/uglifyify",
  "_npmUser": {
    "name": "hughsk",
    "email": "hughskennedy@gmail.com"
  },
  "_npmVersion": "1.4.13",
  "_phantomChildren": {
    "lru-cache": "2.7.3",
    "sigmund": "1.0.1"
  },
  "_requested": {
    "raw": "uglifyify@2.5.0",
    "scope": null,
    "escapedName": "uglifyify",
    "name": "uglifyify",
    "rawSpec": "2.5.0",
    "spec": "2.5.0",
    "type": "version"
  },
  "_requiredBy": [
    "#DEV:/"
  ],
  "_resolved": "https://registry.npmjs.org/uglifyify/-/uglifyify-2.5.0.tgz",
  "_shasum": "1d4cd0148fe63a5021728234263cd4521ba328f9",
  "_shrinkwrap": null,
  "_spec": "uglifyify@2.5.0",
  "_where": "/home/lucho/prj/emibg",
  "author": {
    "name": "Hugh Kennedy",
    "email": "hughskennedy@gmail.com",
    "url": "http://hughskennedy.com/"
  },
  "bugs": {
    "url": "https://github.com/hughsk/uglifyify/issues"
  },
  "dependencies": {
    "convert-source-map": "~0.2.3",
    "extend": "^1.2.1",
    "minimatch": "^0.3.0",
    "through": "~2.3.4",
    "uglify-js": "2.x.x"
  },
  "description": "A browserify transform which minifies your code using UglifyJS2",
  "devDependencies": {},
  "directories": {},
  "dist": {
    "shasum": "1d4cd0148fe63a5021728234263cd4521ba328f9",
    "tarball": "https://registry.npmjs.org/uglifyify/-/uglifyify-2.5.0.tgz"
  },
  "gitHead": "970433001f5bc3eefb403ac5c7c7ef3f6c52a1fa",
  "homepage": "https://github.com/hughsk/uglifyify#readme",
  "keywords": [
    "uglify",
    "minify",
    "compress",
    "compile",
    "browserify",
    "transform",
    "stream"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "hughsk",
      "email": "hughskennedy@gmail.com"
    }
  ],
  "name": "uglifyify",
  "optionalDependencies": {},
  "readme": "# uglifyify\n\nA [Browserify](http://browserify.org) v2 transform which minifies your code\nusing [UglifyJS2](https://github.com/mishoo/UglifyJS2).\n\n## Installation\n\n``` bash\nnpm install uglifyify\n```\n\n## Motivation/Usage\n\nOrdinarily you'd be fine doing this:\n\n``` bash\nbrowserify index.js | uglifyjs -c > bundle.js\n```\n\nBut uglifyify gives you the benefit applying Uglify's \"squeeze\" transform\n*before* it's processed by Browserify, meaning you can remove dead code paths\nfor conditional requires. Here's a contrived example:\n\n``` javascript\nif (true) {\n  module.exports = require('./browser')\n} else {\n  module.exports = require('./node')\n}\n```\n\n`module.exports = require('./node')` will be excluded by Uglify, meaning that\nonly `./browser` will be bundled and required.\n\nIf you combine uglifyify with [envify](http://github.com/hughsk/envify), you\ncan make this a little more accessible. Take this code:\n\n``` javascript\nif (process.env.NODE_ENV === 'development') {\n  module.exports = require('./development')\n} else {\n  module.exports = require('./production')\n}\n```\n\nAnd use this to compile:\n\n``` bash\nNODE_ENV=development browserify -t envify -t uglifyify index.js -o dev.js &&\nNODE_ENV=production browserify -t envify -t uglifyify index.js -o prod.js\n```\n\nIt should go without saying that you should be hesitant using environment\nvariables in a Browserify module - this is best suited to your own\napplications or modules built with Browserify's `--standalone` tag.\n\n## File Extensions\n\nSometimes, you don't want uglifyify to minify all of your files – for example,\nif you're using a transform to `require` CSS or HTML, you might get an error\nas uglify expects JavaScript and will throw if it can't parse what it's given.\n\nThis is done using the `-x` or `--exts` transform options, e.g. from the\ncommand-line:\n\n``` bash\nbrowserify     \\\n  -t coffeeify \\\n  -t [ uglifyify -x .js -x .coffee ]\n```\n\nThe above example will only minify `.js` and `.coffee` files, ignoring the rest.\n\n## Global Transforms\n\nYou might also want to take advantage of uglifyify's pre-bundle minification\nto produce slightly leaner files across your entire browserify bundle. By\ndefault, transforms only alter your application code, but you can use global\ntransforms to minify module code too. From your terminal:\n\n``` bash\nbrowserify -g uglifyify ./index.js > bundle.js\n```\n\nOr programatically:\n\n``` javascript\nvar browserify = require('browserify')\nvar fs = require('fs')\n\nvar bundler = browserify(__dirname + '/index.js')\n\nbundler.transform({\n  global: true\n}, 'uglifyify')\n\nbundler.bundle()\n  .pipe(fs.createWriteStream(__dirname + '/bundle.js'))\n```\n\nNote that this is fine for uglifyify as it shouldn't modify the behavior of\nyour code unexpectedly, but transforms such as envify should almost always\nstay local – otherwise you'll run into unexpected side-effects within modules\nthat weren't expecting to be modified as such.\n\n## Ignoring Files\n\nSometimes uglifyjs will break specific files under specific settings – it's\nrare, but does happen – and to work around that, you can use the `ignore`\noption. Given one or more glob patterns, you can filter out specific files\nthis way:\n\n``` bash\nbrowserify -g [ uglifyify --ignore '**/node_modules/weakmap/*' ] ./index.js\n```\n\n``` javascript\nvar bundler = browserify('index.js')\n\nbundler.transform({\n    global: true\n  , ignore: [\n      '**/node_modules/weakmap/*'\n    , '**/node_modules/async/*'\n  ]\n}, 'uglifyify')\n\nbundler.bundle().pipe(process.stdout)\n```\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/hughsk/uglifyify.git"
  },
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "version": "2.5.0"
}
