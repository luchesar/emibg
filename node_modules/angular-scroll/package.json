{
  "_args": [
    [
      {
        "raw": "angular-scroll@1.0.0",
        "scope": null,
        "escapedName": "angular-scroll",
        "name": "angular-scroll",
        "rawSpec": "1.0.0",
        "spec": "1.0.0",
        "type": "version"
      },
      "/home/lucho/prj/emibg"
    ]
  ],
  "_from": "angular-scroll@1.0.0",
  "_id": "angular-scroll@1.0.0",
  "_inCache": true,
  "_location": "/angular-scroll",
  "_nodeVersion": "4.1.0",
  "_npmUser": {
    "name": "oblador",
    "email": "joel@oblador.se"
  },
  "_npmVersion": "2.14.3",
  "_phantomChildren": {},
  "_requested": {
    "raw": "angular-scroll@1.0.0",
    "scope": null,
    "escapedName": "angular-scroll",
    "name": "angular-scroll",
    "rawSpec": "1.0.0",
    "spec": "1.0.0",
    "type": "version"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/angular-scroll/-/angular-scroll-1.0.0.tgz",
  "_shasum": "6c916fc5c5a1b8706a6b54ce121ff2574a7b24bd",
  "_shrinkwrap": null,
  "_spec": "angular-scroll@1.0.0",
  "_where": "/home/lucho/prj/emibg",
  "author": {
    "name": "Joel Arvidsson"
  },
  "bugs": {
    "url": "https://github.com/oblador/angular-scroll/issues"
  },
  "dependencies": {},
  "description": "Scrollspy, animated scrollTo and scroll events",
  "devDependencies": {
    "gulp": "^3.8.11",
    "gulp-concat": "^2.5.1",
    "gulp-jshint": "^1.9.2",
    "gulp-ng-annotate": "^0.5.2",
    "gulp-rimraf": "^0.1.1",
    "gulp-sourcemaps": "^1.3.0",
    "gulp-uglify": "^1.1.0",
    "http-server": "^0.7.4",
    "jasmine-given": "^2.6.2",
    "karma": "^0.12.31",
    "karma-chrome-launcher": "^0.1.7",
    "karma-firefox-launcher": "^0.1.4",
    "karma-jasmine": "^0.3.5",
    "protractor": "^1.7.0"
  },
  "directories": {},
  "dist": {
    "shasum": "6c916fc5c5a1b8706a6b54ce121ff2574a7b24bd",
    "tarball": "https://registry.npmjs.org/angular-scroll/-/angular-scroll-1.0.0.tgz"
  },
  "gitHead": "6328e9ea902cd898c28a3d70050913453ddcd424",
  "homepage": "https://github.com/oblador/angular-scroll#readme",
  "keywords": [
    "angular",
    "smooth-scroll",
    "scrollspy",
    "scrollTo",
    "scrolling"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "oblador",
      "email": "joel@oblador.se"
    }
  ],
  "name": "angular-scroll",
  "optionalDependencies": {},
  "readme": "angular-scroll\n==============\n\nAngular is only dependency (no jQuery). 8K minified or 2K gzipped.\n\nExample\n-------\nCheck out [the live demo](http://oblador.github.io/angular-scroll/) or the [source code](https://github.com/oblador/angular-scroll/blob/master/example/index.html).\n\nInstall\n-------\n\n#### With bower:\n\n    $ bower install angular-scroll\n\n#### With npm (for use with browserify):\n\n    $ npm install angular-scroll\n\nYou can also download the [production version](https://raw.github.com/oblador/angular-scroll/master/angular-scroll.min.js) or the [development version](https://raw.github.com/oblador/angular-scroll/master/angular-scroll.js).\n\nIf you prefer a CDN hosted version (which might speed up your load times), check out [cdnjs.com/libraries/angular-scroll](https://cdnjs.com/libraries/angular-scroll).\n\n\nDon't forget to add `duScroll` to your module dependencies. \n\n`angular.element` Scroll API\n----------------------------\n\nThis module extends the `angular.element` object with a few jQuery like functions. Note that `$document` is an `angular.element`, for usage example see below. In case of name collisions existing jQuery or jqlite functions will be preserved, just use the prefixed version: ie `.duScrollTo()` instead of `.scrollTo()`.\n\n#### `.scrollTo( left, top [, duration [, easing ] ] )`\nScrolls the element/window to the specified left/top position. If `duration` is specified the scrolling is animated for n milliseconds. If `easing` is ommited the animation will default to the `duScrollEasing` function.\n\n#### `.scrollTo( element [, offset, [, duration [, easing ] ] ] )`\nAlias of `.scrollToElement`.\n\n#### `.scrollToElement( element [, offset, [, duration [, easing ] ] ] )`\nScrolls to the specified element, if `offset` is passed it will be subtracted from the elements position which is good if one uses floating menus. \n\n#### `.scrollToElementAnimated( element [, offset, [, duration [, easing ] ] ] )`\nConvenience function. Works exactly the same as `scrollToElement` but uses the default values from `duScrollOffset`, `duScrollDuration` and `duScrollEasing` unless otherwise specified. \n\n#### `.scrollTop|scrollLeft( )`\nReturns current scroll position. \n\n#### `.scrollTop|scrollLeft( top [, duration [, easing ] ] )` \nScrolls to specified position in either axis, with optional animation. \n\n#### `.scrollTopAnimated|scrollLeftAnimated( top [, duration [, easing ] ] )` \nConvenience function like `scrollToElementAnimated` but for `scrollTop`/`scrollLeft`. \n\n#### Promises\nAnimated scrolling returns a `$q` promise, it will resolve when the scrolling has finished or be rejected if cancelled (by starting another scroll animation before it finished).\n\n#### Example\n```js\nangular.module('myApp', ['duScroll']).\n  controller('myCtrl', function($scope, $document) {\n    var top = 400;\n    var duration = 2000; //milliseconds\n\n    //Scroll to the exact position\n    $document.scrollTop(top, duration).then(function() {\n      console && console.log('You just scrolled to the top!');\n    });\n\n    var offset = 30; //pixels; adjust for floating menu, context etc\n    //Scroll to #some-id with 30 px \"padding\"\n    //Note: Use this in a directive, not with document.getElementById \n    var someElement = angular.element(document.getElementById('some-id'));\n    $document.scrollToElement(someElement, offset, duration);\n  }\n);\n```\n\nThe above example can be achieved by configuration instead of arguments:\n\n```js\nangular.module('myApp', ['duScroll'])\n  .value('duScrollDuration', 2000)\n  .value('duScrollOffset', 30)\n  .controller('myCtrl', function($scope, $document) {\n    $document.scrollTopAnimated(400).then(function() {\n      console && console.log('You just scrolled to the top!');\n    });\n\n    var someElement = angular.element(document.getElementById('some-id'));\n    $document.scrollToElementAnimated(someElement);\n  }\n);\n```\n\n\nDirectives\n----------\n\n### `du-smooth-scroll`\nProvides smooth anchor scrolling. \n```html\n<a href=\"#anchor\" du-smooth-scroll>Scroll it!</a>\n```\n\nIf you for some reason you do not want to use the `href` attribute as fallback, just use the `du-smooth-scroll` attribute instead but without leading #. Example: `<a du-smooth-scroll=\"anchor\">`.\n\n### `du-scrollspy`\nObserves whether the target element is at the top of the viewport (or container) and adds an `active` class if so. Takes optional `offset` and `duration` attributes which is passed on to `.scrollTo`,\n\n```html\n<a href=\"#anchor\" du-scrollspy>Am i active?</a>\n```\n\nor together with Bootstrap\n\n```html\n<ul class=\"nav navbar-nav\">\n  <li du-scrollspy=\"anchor\"><a href=\"#anchor\">Link</a></li>\n</ul>\n```\n\n### `du-spy-context`\nEnables multiple sets of spies on the same target element. Takes optional `offset` attribute to \n\n```html\n<ul du-spy-context class=\"nav navbar-nav\">\n  <li du-scrollspy=\"anchor\"><a href=\"#anchor\">Link</a></li>\n</ul>\n<ul du-spy-context class=\"nav navbar-nav\">\n  <li du-scrollspy=\"anchor\"><a href=\"#anchor\">Link</a></li>\n</ul>\n```\n### `du-scroll-container`\nModifies behavior of `du-scrollspy` and `du-smooth-scroll` to observe/scroll within and element instead of the window/document. Good for modals/elements with `overflow: auto/scroll`.\n\n```html\n<div du-scroll-container>\n  <p id=\"top\">This is the top</p>\n  <p id=\"anchor\">Scroll to me, or <a href=\"#top\" du-smooth-scroll>the top</a></p>\n</div>\n```\n\nIf your links lie outside of the scrollable element, wrap them with the `du-scroll-container` directive and send the element id as argument:\n\n```html\n<ul du-scroll-container=\"scroll-container\">\n  <li><a href=\"#anchor\" du-smooth-scroll>Link</a></li>\n</ul>\n<div id=\"scroll-container\">\n  [...]\n</div>\n```\n\n### [All in together now](http://www.youtube.com/watch?v=cx4KtTezEFg&feature=kp)\nThe directives play well together, try [the demo](http://oblador.github.io/angular-scroll/container.html) or inspect its [source code](https://github.com/oblador/angular-scroll/blob/master/example/container.html).\n\n```html\n<ul du-spy-context du-scroll-container=\"scroll-container\">\n  <li><a href=\"#anchor\" offset=\"30\" du-smooth-scroll du-scrollspy>Link</a></li>\n</ul>\n<ul du-spy-context du-scroll-container=\"scroll-container\">\n  <li><a href=\"#anchor\" offset=\"30\" du-smooth-scroll du-scrollspy>Link</a></li>\n</ul>\n<div id=\"scroll-container\">\n  [...]\n</div>\n```\n\nObserving Scroll Position\n-------------------------\n\n**NOTE:** the `$duScrollChanged` event and the `scrollPosition` service are deprecated. Use `angular.element().on()` together with `.scrollTop()` instead. \n\n```js\nangular.module('myApp', ['duScroll']).\n  controller('MyCtrl', function($scope, $document){\n    $document.on('scroll', function() {\n      console.log('Document scrolled to ', $document.scrollLeft(), $document.scrollTop());\n    });\n    var container = angular.element(document.getElementById('container'));\n    container.on('scroll', function() {\n      console.log('Container scrolled to ', container.scrollLeft(), container.scrollTop());\n    });\n  }\n);\n```\n\nConfiguration\n-------------\n\n### Scroll speed\nDuration is defined in milliseconds.\n\nTo set a scroll duration on a single anchor:\n```html\n<a href=\"#anchor\" du-smooth-scroll duration=\"5000\">Scroll it!</a>\n```\n\nTo change the default duration:\n```js\nangular.module('myApp', ['duScroll']).value('duScrollDuration', 5000);\n```\n\n### Scroll easing\nSet the `duScrollEasing` value to a function that takes and returns a value between 0 to 1. Here's [a few examples](https://gist.github.com/gre/1650294) to choose from.\n\n```js\nfunction invertedEasingFunction(x) {\n  return 1-x;\n}\nangular.module('myApp', ['duScroll']).value('duScrollEasing', invertedEasingFunction);\n```\n\nYou can also pass a custom easing function as the fourth argument in `scrollTo`.\n\n### Greedy option\nSet the `duScrollGreedy` value to `true` if the elements you are observing are not wrapping the whole section you want to observe, but merely the first one in the section (such as headlines).\n\n```js\nangular.module('myApp', ['duScroll']).value('duScrollGreedy', true);\n```\n\n### Offset\nTo change default offset (in pixels) for the `du-smooth-scroll` directive:\n\n```js\nangular.module('myApp', ['duScroll']).value('duScrollOffset', 30);\n```\n\n### When to cancel scroll animation\nSpecify on which events on the container the scroll animation should be cancelled by modifying `duScrollCancelOnEvents`, set to `false` to disable entirely as shown below. Defaults to `scroll mousedown mousewheel touchmove keydown`.\n\n```js\nangular.module('myApp', ['duScroll']).value('duScrollCancelOnEvents', false);\n```\n\n### Bottom spy\nTo make the last `du-scrollspy` link active when scroll reaches page/container bottom:\n\n```js\nangular.module('myApp', ['duScroll']).value('duScrollBottomSpy', true);\n```\n\n### Active class\nSpecify the active class name to apply to a link when it is active, default is `active`.\n\n```js\nangular.module('myApp', ['duScroll']).value('duScrollActiveClass', 'custom-class');\n```\n\nEvents\n------\n\nThe `duScrollspy` directive fires the global events `duScrollspy:becameActive` and `duScrollspy:becameInactive` with an angular.element wrapped element as first argument and the element being spied on as second. This is nice to have if you want the URL bar to reflect where on the page the visitor are, like this: \n\n```js\nangular.module('myApp', ['duScroll']).\n  run(function($rootScope) {\n    if(!window.history || !history.replaceState) {\n      return;\n    }\n    $rootScope.$on('duScrollspy:becameActive', function($event, $element, $target){\n      //Automaticly update location\n      var hash = $element.prop('hash');\n      if (hash) {\n        history.replaceState(null, null, hash);\n      }\n    });\n  });\n```\n\n\nBuilding\n--------\n\n    $ npm install\n    $ bower install\n    $ gulp\n\nTests\n-----\n\n### Unit tests\n\n    $ npm test\n\n### End to end tests\n\n    $ npm run update-webdriver\n    $ npm run protractor\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/oblador/angular-scroll.git"
  },
  "scripts": {
    "build": "gulp build",
    "protractor": "node_modules/protractor/bin/protractor test/protractor.conf.js",
    "start": "http-server -p 8888",
    "test": "./node_modules/karma/bin/karma start test/karma.conf.js",
    "test-ci": "gulp test",
    "test-single-run": "./node_modules/karma/bin/karma start test/karma.conf.js --single-run",
    "update-webdriver": "node_modules/protractor/bin/webdriver-manager update"
  },
  "version": "1.0.0"
}
