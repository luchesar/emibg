{
  "_args": [
    [
      {
        "raw": "karma-browserify@4.0.0",
        "scope": null,
        "escapedName": "karma-browserify",
        "name": "karma-browserify",
        "rawSpec": "4.0.0",
        "spec": "4.0.0",
        "type": "version"
      },
      "/home/lucho/prj/emibg"
    ]
  ],
  "_from": "karma-browserify@4.0.0",
  "_id": "karma-browserify@4.0.0",
  "_inCache": true,
  "_location": "/karma-browserify",
  "_npmUser": {
    "name": "nikku",
    "email": "git_nikku@nixis.de"
  },
  "_npmVersion": "1.4.28",
  "_phantomChildren": {
    "brace-expansion": "1.1.7",
    "browser-resolve": "1.11.2",
    "browserify-zlib": "0.1.4",
    "builtins": "0.0.7",
    "combine-source-map": "0.3.0",
    "commondir": "0.0.1",
    "console-browserify": "1.1.0",
    "constants-browserify": "0.0.1",
    "core-util-is": "1.0.2",
    "crypto-browserify": "3.11.0",
    "deep-equal": "1.0.1",
    "deps-sort": "1.3.9",
    "domain-browser": "1.1.7",
    "duplexer2": "0.0.2",
    "events": "1.0.2",
    "has": "1.0.1",
    "http-browserify": "1.7.0",
    "https-browserify": "0.0.1",
    "ieee754": "1.1.8",
    "inflight": "1.0.6",
    "inherits": "2.0.3",
    "insert-module-globals": "6.6.3",
    "isarray": "0.0.1",
    "jsonparse": "0.0.5",
    "labeled-stream-splicer": "1.0.2",
    "lru-cache": "2.7.3",
    "module-deps": "3.9.1",
    "once": "1.4.0",
    "os-browserify": "0.1.2",
    "path-browserify": "0.0.0",
    "path-parse": "1.0.5",
    "path-platform": "0.11.15",
    "querystring-es3": "0.2.1",
    "read-only-stream": "1.1.1",
    "shallow-copy": "0.0.1",
    "shasum": "1.0.2",
    "shell-quote": "0.0.1",
    "sigmund": "1.0.1",
    "stream-browserify": "1.0.0",
    "string_decoder": "0.10.31",
    "syntax-error": "1.3.0",
    "through": "2.3.8",
    "timers-browserify": "1.4.2",
    "tty-browserify": "0.0.0",
    "typedarray": "0.0.6",
    "url": "0.10.3",
    "util": "0.10.3",
    "vm-browserify": "0.0.4"
  },
  "_requested": {
    "raw": "karma-browserify@4.0.0",
    "scope": null,
    "escapedName": "karma-browserify",
    "name": "karma-browserify",
    "rawSpec": "4.0.0",
    "spec": "4.0.0",
    "type": "version"
  },
  "_requiredBy": [
    "#DEV:/"
  ],
  "_resolved": "https://registry.npmjs.org/karma-browserify/-/karma-browserify-4.0.0.tgz",
  "_shasum": "e6360a62e390d7a31b629d48b7de47758f09f9ba",
  "_shrinkwrap": null,
  "_spec": "karma-browserify@4.0.0",
  "_where": "/home/lucho/prj/emibg",
  "authors": [
    "Nico Rehwaldt <git_nikku@nixis.de>",
    "Ben Drucker <bvdrucker@gmail.com>"
  ],
  "bugs": {
    "url": "https://github.com/nikku/karma-browserify/issues"
  },
  "dependencies": {
    "browserify": "^9.0.3",
    "convert-source-map": "~0.3.3",
    "hat": "0.0.3",
    "js-string-escape": "^1.0.0",
    "lodash": "~2.4.1",
    "minimatch": "^1.0.0",
    "os-shim": "~0.1.2",
    "watchify": "^2.4.0"
  },
  "description": "A fast browserify integration for Karma that handles large projects with ease",
  "devDependencies": {
    "brfs": "^1.4.0",
    "browser-unpack": "~1.0.0",
    "chai": "^1.9.1",
    "chai-spies": "^0.5.1",
    "grunt": "~0.4.4",
    "grunt-contrib-jshint": "~0.10.0",
    "grunt-jasmine-node": "~0.2.1",
    "grunt-mocha-test": "^0.11.0",
    "grunt-release": "~0.7.0",
    "karma": "^0.12.19",
    "karma-jasmine": "^0.1.5",
    "karma-phantomjs-launcher": "^0.1.4",
    "load-grunt-tasks": "~0.4.0",
    "touch": "0.0.3",
    "tsify": "^0.8.1"
  },
  "directories": {},
  "dist": {
    "shasum": "e6360a62e390d7a31b629d48b7de47758f09f9ba",
    "tarball": "https://registry.npmjs.org/karma-browserify/-/karma-browserify-4.0.0.tgz"
  },
  "gitHead": "493efe395856ca8644eeb097474200a855ca1b60",
  "homepage": "https://github.com/nikku/karma-browserify#readme",
  "keywords": [
    "karma-plugin",
    "karma-preprocessor",
    "browserify-tool",
    "browserify"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "xdissent",
      "email": "xdissent@me.com"
    },
    {
      "name": "alexgorbatchev",
      "email": "alex.gorbatchev@gmail.com"
    },
    {
      "name": "nikku",
      "email": "git_nikku@nixis.de"
    },
    {
      "name": "bendrucker",
      "email": "bvdrucker@gmail.com"
    }
  ],
  "name": "karma-browserify",
  "optionalDependencies": {},
  "peerDependencies": {
    "karma": ">=0.10"
  },
  "readme": "# karma-browserify\n\n[![Build Status](https://travis-ci.org/nikku/karma-browserify.svg?branch=master)](https://travis-ci.org/nikku/karma-browserify)\n\n[karma-browserify](https://github.com/nikku/karma-browserify) is a fast [browserify](http://browserify.org) integration for [Karma](https://karma-runner.github.io) that handles large projects with ease.\n\n\n## Installation\n\nGet the plug-in via [npm](https://www.npmjs.org/)\n\n```\nnpm install --save-dev karma-browserify\n```\n\n\n## Usage\n\nAdd `browserify` as a framework to your Karma configuration file. For each file that should be processed and bundled by karma, configure the `browserify` preprocessor. Optionally use the `browserify` config entry to configure how the bundle gets created.\n\n\n```javascript\nmodule.exports = function(karma) {\n  karma.set({\n\n    frameworks: [ 'browserify', 'jasmine', 'or', 'any', 'other', 'framework' ],\n    files: ['test/**/*.js'],\n    preprocessors: {\n      'test/**/*.js': [ 'browserify' ]\n    },\n\n    browserify: {\n      debug: true,\n      transform: [ 'brfs' ]\n    }\n  });\n}\n```\n\nLook at the [example directory](https://github.com/nikku/karma-browserify/tree/master/example) for a simple [browserify](http://browserify.org) + [jasmine](http://jasmine.github.io) project that uses this plug-in.\n\n\n### Browserify Config\n\nTest bundles can be configured through the `browserify` karma configuration property. [Configuration options](https://github.com/substack/node-browserify#var-b--browserifyfiles-or-opts) are passed directly to browserify.\n\nFor example to generate source maps for easier debugging, specify:\n\n```javascript\n    browserify: {\n      debug: true\n    }\n```\n\nThere are three properties that are not passed directly:\n\n* [transform](#transforms)\n* [plugin](#plugins)\n* [configure](#additional-bundle-configuration)\n\n#### Transforms\n\nIf you use CoffeeScript, JSX or other tools that need to transform the source file before bundling, specify a [browserify transform](https://github.com/substack/node-browserify#btransformtr-opts) (karma preprocessors are [not supported](https://github.com/nikku/karma-browserify/issues/36)).\n\n```javascript\n    browserify: {\n      transform: [ 'reactify', 'coffeeify', 'brfs' ]\n\n      // don't forget to register the extensions\n      extensions: ['.js', '.jsx', '.coffee']\n    }\n```\n\nYou can also specify options for the transformations:\n\n```javascript\n    browserify: {\n      transform: [ ['reactify', {'es6': true}], 'coffeeify', 'brfs' ]\n    }\n```\n\n#### Plugins\n\nThe [browserify plugin](https://github.com/substack/node-browserify#bpluginplugin-opts) option supports the same syntax as `transform`.\n\n```javascript\n    browserify: {\n      plugin: [ 'stringify' ]\n    }\n```\n\n#### Additional Bundle Configuration\n\nYou may perform additional configuration in a function passed as the `configure` option and that receives the browserify instance as an argument. A custom `prebundle` event is emitted on the bundle right before a bundling operation takes place. This is useful when setting up things like [externals](https://github.com/substack/node-browserify#external-requires):\n\n```javascript\n    browserify: {\n      configure: function(bundle) {\n        bundle.on('prebundle', function() {\n          bundle.external('foobar');\n        });\n      }\n    }\n```\n\n\n## How it Works\n\nThis project is a preprocessor for Karma that combines test files and dependencies into a browserified bundle. It relies on [watchify](https://github.com/substack/watchify) to generate the bundle and to keep it updated during `autoWatch=true`.\n\nBefore the initial test run we build one browserify bundle for all test cases and dependencies. Once any of the files change, it incrementally updates the bundle. Each file included in karma is required from the file bundle via a stub. Thereby it ensures tests are only executed once per test run.\n\n\n## Detailed Configuration\n\nThe following code snippet shows a Karma configuration file with all Bro related options.\n\n```javascript\nmodule.exports = function(karma) {\n  karma.set({\n\n    // include browserify first in used frameworks\n    frameworks: [ 'browserify', 'jasmine' ],\n\n    // add all your files here,\n    // including non-commonJS files you need to load before your test cases\n    files: [\n      'some-non-cjs-library.js',\n      'test/**/*.js'\n    ],\n\n    // add preprocessor to the files that should be\n    // processed via browserify\n    preprocessors: {\n      'test/**/*.js': [ 'browserify' ]\n    },\n\n    // see what is going on\n    logLevel: 'LOG_DEBUG',\n\n    // use autoWatch=true for quick and easy test re-execution once files change\n    autoWatch: true,\n\n    // add additional browserify configuration properties here\n    // such as transform and/or debug=true to generate source maps\n    browserify: {\n      debug: true,\n      transform: [ 'brfs' ],\n      configure: function(bundle) {\n        bundle.on('prebundle', function() {\n          bundle.external('foobar');\n        });\n      }\n    }\n  });\n};\n```\n\n\n## Related\n\nCredit goes to to the original [karma-browserify](https://github.com/xdissent/karma-browserify) and [karma-browserifast](https://github.com/cjohansen/karma-browserifast). This library builds on the lessons learned in these projects and offers improved configurability, speed and/or the ability to handle large projects.\n\n\n\n## Maintainers\n\n* [Ben Drucker](https://github.com/bendrucker)\n* [Nico Rehwaldt](https://github.com/nikku)\n\n\n## License\n\nMIT\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/nikku/karma-browserify.git"
  },
  "scripts": {
    "test": "grunt test",
    "travis": "grunt travis --verbose"
  },
  "version": "4.0.0"
}
